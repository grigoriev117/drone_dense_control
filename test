#!/usr/bin/env python3
import time
import math
from pymavlink import mavutil
from threading import Thread
import csv
import matplotlib.pyplot as plt
import numpy as np

import tflite_runtime.interpreter as tflite
interpreter = tflite.Interpreter(model_path="gen_final/drone_dense.tflite")
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()


#import tensorflow as tf

#interpreter = tf.lite.Interpreter(model_path="C:/gen_final/drone_dense.tflite")
#interpreter.allocate_tensors()
#in_det  = interpreter.get_input_details()[0]
#out_det = interpreter.get_output_details()[0]

# ----------------------------
# 1) Подключение к автопилоту
# ----------------------------
# Например: 'udp:127.0.0.1:14550' или '/dev/ttyUSB0'
master = mavutil.mavlink_connection('udp:127.0.0.1:14558')
print("Ждём heartbeat от автопилота…")
master.wait_heartbeat()
print(f"Получен heartbeat: система {master.target_system}, компонент {master.target_component}")

# ----------------------------
# 3) Переключение в GUIDED_NOGPS
# ----------------------------
mode_name = 'GUIDED_NOGPS'
mode_id   = master.mode_mapping()[mode_name]
master.mav.set_mode_send(
    master.target_system,
    mavutil.mavlink.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED,
    mode_id
)
print(f"Режим установлен: {mode_name}")
time.sleep(1)

# ----------------------------
# 4) Армим дрон
# ----------------------------
master.mav.command_long_send(
    master.target_system,
    master.target_component,
    mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM,
    0,  # confirmation
    1,  # 1 = arm, 0 = disarm
    0,0,0,0,0,0
)
print("Запрошен ARM…")
# ждём фактического армирования
while True:
    msg = master.recv_match(type='HEARTBEAT', blocking=True)
    armed = (msg.base_mode & mavutil.mavlink.MAV_MODE_FLAG_SAFETY_ARMED) != 0
    if armed:
        print("Дрон заармлен!")
        break

# ----------------------------
# 5) Функция отправки SET_ATTITUDE_TARGET
# ----------------------------
def send_attitude_target(roll: float, pitch: float, yaw: float, yaw_rate: float, thrust: float):
    """
    roll, pitch: в радианах;    yaw_rate: рад/с;    thrust: 0..1
    """
    # вычисляем кватернион из углов Эйлера (yaw=0)
#    cy = math.cos(0 * 0.5)
#    sy = math.sin(0 * 0.5)
    cy = math.cos(yaw * 0.5)
    sy = math.sin(yaw * 0.5)
    cp = math.cos(pitch * 0.5)
    sp = math.sin(pitch * 0.5)
    cr = math.cos(roll * 0.5)
    sr = math.sin(roll * 0.5)

    q0 = cr * cp * cy + sr * sp * sy
    q1 = sr * cp * cy - cr * sp * sy
    q2 = cr * sp * cy + sr * cp * sy
    q3 = cr * cp * sy - sr * sp * cy

    # битовая маска: игнорировать body rates, т.е. использовать только quaternion+thrust
    type_mask = 0b00000111

    # время от старта в мс
    t_ms = int(time.time() * 1000) & 0xFFFFFFFF

    master.mav.set_attitude_target_send(
        t_ms,
        master.target_system,
        master.target_component,
        type_mask,
        [q0, q1, q2, q3],
        #[0, 0, 0, 0],
        0.0, 0.0, yaw_rate,
        thrust
    )

# ----------------------------
# 6) Взлёт на 1 метр
# ----------------------------
TARGET_ALT = 0.8  # метры
CLIMB_THRUST = 0.38
HOVER_THRUST = 0.38

print("Набор высоты до 1 м…")
while True:
    # получаем барометрическую относительную высоту в GLOBAL_POSITION_INT
    msg = master.recv_match(type='GLOBAL_POSITION_INT', blocking=True, timeout=1)
    if not msg:
        continue
    rel_alt = msg.relative_alt / 1000.0  # в метрах
    print(f"  высота = {rel_alt:.2f} м", end='\r')

    if rel_alt < TARGET_ALT - 0.05:
        send_attitude_target(0, 0, 0, 0, CLIMB_THRUST)
    else:
        print("\nДостигнута заданная высота.")
        break
    time.sleep(0.1)

# ----------------------------
# 7) Зависание 30 секунд
# ----------------------------
print("start mission…")
targets = [np.array([1, 0, 0], np.float32),
np.array([0, 1, 0], np.float32),
np.array([-1, 0, 0], np.float32),
np.array([0, -1, 0], np.float32),
]


SEQ_LEN = 1  # модель обучалась на последовательности длиной 1

for i, target in enumerate(targets):
    input_tensor = np.expand_dims(target, axis=0)         # (1, 3)
    input_tensor = np.expand_dims(input_tensor, axis=0)   # (1, 1, 3)

    interpreter.set_tensor(in_det["index"], input_tensor)
    interpreter.invoke()

    output = interpreter.get_tensor(out_det["index"])  # (1, 1, 3)
    roll_predicted, pitch_predicted, thrust_predicted, time_predicted = output[0, 0]
    print(roll_predicted, pitch_predicted, thrust_predicted, time_predicted)
    t0 = time.time()
    time.sleep(5)
    while time.time() - t0 < time_predicted:
        #print(1)
        send_attitude_target(roll_predicted, pitch_predicted, 0, 0, thrust_predicted)

    t0 = time.time()
    while time.time() - t0 < 0.5:
        # print(0)
        send_attitude_target(roll_predicted*(-0.1), pitch_predicted*(-0.1), 0, 0, thrust_predicted)


# ----------------------------
# 8) Автопосадка
# ----------------------------
print("Запуск посадки (LAND)…")
land_mode = 'LAND'
land_mode_id = master.mode_mapping()[land_mode]
master.mav.set_mode_send(
    master.target_system,
    mavutil.mavlink.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED,
    land_mode_id
)

print("Готово. Дрон будет автоматически опускаться и выключится при касании земли.")
